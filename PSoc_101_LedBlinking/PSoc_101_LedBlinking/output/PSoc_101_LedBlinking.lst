FILE: .\boot.asm
                                        (0001) ; Generated by PSoC Designer 5.0.1127.0
                                        (0002) ;
                                        (0003) ;@Id: boot.tpl#884 @
                                        (0004) ;=============================================================================
                                        (0005) ;  FILENAME:   boot.asm
                                        (0006) ;  Version:    4.17
                                        (0007) ;
                                        (0008) ;  DESCRIPTION:
                                        (0009) ;  M8C Boot Code for CY8C21x34 microcontroller devices.
                                        (0010) ;
                                        (0011) ;  Copyright (c) Cypress Semiconductor 2009. All Rights Reserved.
                                        (0012) ;
                                        (0013) ; NOTES:
                                        (0014) ; PSoC Designer's Device Editor uses a template file, BOOT.TPL, located in
                                        (0015) ; the project's root directory to create BOOT.ASM. Any changes made to
                                        (0016) ; BOOT.ASM will be  overwritten every time the project is generated; therefore
                                        (0017) ; changes should be made to BOOT.TPL not BOOT.ASM. Care must be taken when
                                        (0018) ; modifying BOOT.TPL so that replacement strings (such as @PROJECT_NAME)
                                        (0019) ; are not accidentally modified.
                                        (0020) ;
                                        (0021) ;=============================================================================
                                        (0022) 
                                        (0023) include ".\lib\GlobalParams.inc"	;File generated by PSoC Designer (Project dependent)
                                        (0024) include "m8c.inc"			;Part specific file
                                        (0025) include "m8ssc.inc"			;Part specific file
                                        (0026) include "memory.inc"			;File generated by PSoC Designer (Project dependent)
                                        (0027) 
                                        (0028) ;--------------------------------------
                                        (0029) ; Export Declarations
                                        (0030) ;--------------------------------------
                                        (0031) 
                                        (0032) export __Start
                                        (0033) IF	(TOOLCHAIN & HITECH)
                                        (0034) ELSE
                                        (0035) export __bss_start
                                        (0036) export __data_start
                                        (0037) export __idata_start
                                        (0038) export __func_lit_start
                                        (0039) export __text_start
                                        (0040) ENDIF
                                        (0041) export  _bGetPowerSetting
                                        (0042) export   bGetPowerSetting
                                        (0043) 
                                        (0044) 
                                        (0045) ;--------------------------------------
                                        (0046) ; Optimization flags
                                        (0047) ;--------------------------------------
                                        (0048) ;
                                        (0049) ; To change the value of these flags, modify the file boot.tpl, not
                                        (0050) ; boot.asm. See the notes in the banner comment at the beginning of
                                        (0051) ; this file.
                                        (0052) 
                                        (0053) ; Optimization for Assembly language (only) projects and C-language projects
                                        (0054) ; that do not depend on the C compiler to initialize the values of RAM variables.
                                        (0055) ;   Set to 1: Support for C Run-time Environment initialization
                                        (0056) ;   Set to 0: Support for C not included. Faster start up, smaller code space.
                                        (0057) ;
                                        (0058) IF	(TOOLCHAIN & HITECH)
                                        (0059) ; The C compiler will customize the startup code - it's not required here
                                        (0060) 
                                        (0061) C_LANGUAGE_SUPPORT:              equ 0
                                        (0062) ELSE
                                        (0063) C_LANGUAGE_SUPPORT:              equ 1
                                        (0064) ENDIF
                                        (0065) 
                                        (0066) 
                                        (0067) ; For historical reasons, by default the boot code uses an lcall instruction
                                        (0068) ; to invoke the user's _main code. If _main executes a return instruction,
                                        (0069) ; boot provides an infinite loop. By changing the following equate from zero
                                        (0070) ; to 1, boot's lcall will be replaced by a ljmp instruction, saving two
                                        (0071) ; bytes on the stack which are otherwise required for the return address. If
                                        (0072) ; this option is enabled, _main must not return. (Beginning with the 4.2
                                        (0073) ; release, the C compiler automatically places an infinite loop at the end
                                        (0074) ; of main, rather than a return instruction.)
                                        (0075) ;
                                        (0076) ENABLE_LJMP_TO_MAIN:             equ 0
                                        (0077) 
                                        (0078) 
                                        (0079) ;-----------------------------------------------------------------------------
                                        (0080) ; Interrupt Vector Table
                                        (0081) ;-----------------------------------------------------------------------------
                                        (0082) ;
                                        (0083) ; Interrupt vector table entries are 4 bytes long.  Each one contains
                                        (0084) ; a jump instruction to an ISR (Interrupt Service Routine), although
                                        (0085) ; very short ISRs could be encoded within the table itself. Normally,
                                        (0086) ; vector jump targets are modified automatically according to the user
                                        (0087) ; modules selected. This occurs when the 'Generate Application' opera-
                                        (0088) ; tion is run causing PSoC Designer to create boot.asm and the other
                                        (0089) ; configuration files. If you need to hard code a vector, update the
                                        (0090) ; file boot.tpl, not boot.asm. See the banner comment at the beginning
                                        (0091) ; of this file.
                                        (0092) ;-----------------------------------------------------------------------------
                                        (0093) 
                                        (0094)     AREA TOP (ROM, ABS, CON)
                                        (0095) 
                                        (0096)     org   0                        ;Reset Interrupt Vector
                                        (0097) IF	(TOOLCHAIN & HITECH)
                                        (0098) ;   jmp   __Start                  ;C compiler fills in this vector
                                        (0099) ELSE
0000: 80 67    JMP   0x0068             (0100)     jmp   __Start                  ;First instruction executed following a Reset
                                        (0101) ENDIF
                                        (0102) 
                                        (0103)     org   04h                      ;Low Voltage Detect (LVD) Interrupt Vector
0002: 30       HALT                     
0003: 30       HALT                     
0004: 30       HALT                     (0104)     halt                           ;Stop execution if power falls too low
                                        (0105) 
                                        (0106)     org   08h                      ;Analog Column 0 Interrupt Vector
                                        (0107)     // call	void_handler
0005: 30       HALT                     
0006: 30       HALT                     
0007: 30       HALT                     
0008: 7E       RETI                     (0108)     reti
                                        (0109) 
                                        (0110)     org   0Ch                      ;Analog Column 1 Interrupt Vector
                                        (0111)     // call	void_handler
0009: 30       HALT                     
000A: 30       HALT                     
000B: 30       HALT                     
000C: 7E       RETI                     (0112)     reti
                                        (0113) 
                                        (0114)     org   18h                      ;VC3 Interrupt Vector
                                        (0115)     // call	void_handler
000D: 30       HALT                     
000E: 30       HALT                     
000F: 30       HALT                     
0010: 30       HALT                     
0011: 30       HALT                     
0012: 30       HALT                     
0013: 30       HALT                     
0014: 30       HALT                     
0015: 30       HALT                     
0016: 30       HALT                     
0017: 30       HALT                     
0018: 7E       RETI                     (0116)     reti
                                        (0117) 
                                        (0118)     org   1Ch                      ;GPIO Interrupt Vector
                                        (0119)     // call	void_handler
0019: 30       HALT                     
001A: 30       HALT                     
001B: 30       HALT                     
001C: 7E       RETI                     (0120)     reti
                                        (0121) 
                                        (0122)     org   20h                      ;PSoC Block DBB00 Interrupt Vector
001D: 30       HALT                     
001E: 30       HALT                     
001F: 30       HALT                     
0020: 7D 02 7F LJMP  0x027F             (0123)     ljmp	_LED_PWM_ISR
0023: 7E       RETI                     (0124)     reti
                                        (0125) 
                                        (0126)     org   24h                      ;PSoC Block DBB01 Interrupt Vector
                                        (0127)     // call	void_handler
0024: 7E       RETI                     (0128)     reti
                                        (0129) 
                                        (0130)     org   28h                      ;PSoC Block DCB02 Interrupt Vector
                                        (0131)     // call	void_handler
0025: 30       HALT                     
0026: 30       HALT                     
0027: 30       HALT                     
0028: 7E       RETI                     (0132)     reti
                                        (0133) 
                                        (0134)     org   2Ch                      ;PSoC Block DCB03 Interrupt Vector
                                        (0135)     // call	void_handler
0029: 30       HALT                     
002A: 30       HALT                     
002B: 30       HALT                     
002C: 7E       RETI                     (0136)     reti
                                        (0137) 
                                        (0138)     org   60h                      ;PSoC I2C Interrupt Vector
                                        (0139)     // call	void_handler
002D: 30       HALT                     
002E: 30       HALT                     
002F: 30       HALT                     
0030: 30       HALT                     
0031: 30       HALT                     
0032: 30       HALT                     
0033: 30       HALT                     
0034: 30       HALT                     
0035: 30       HALT                     
0036: 30       HALT                     
0037: 30       HALT                     
0038: 30       HALT                     
0039: 30       HALT                     
003A: 30       HALT                     
003B: 30       HALT                     
003C: 30       HALT                     
003D: 30       HALT                     
003E: 30       HALT                     
003F: 30       HALT                     
0040: 30       HALT                     
0041: 30       HALT                     
0042: 30       HALT                     
0043: 30       HALT                     
0044: 30       HALT                     
0045: 30       HALT                     
0046: 30       HALT                     
0047: 30       HALT                     
0048: 30       HALT                     
0049: 30       HALT                     
004A: 30       HALT                     
004B: 30       HALT                     
004C: 30       HALT                     
004D: 30       HALT                     
004E: 30       HALT                     
004F: 30       HALT                     
0050: 30       HALT                     
0051: 30       HALT                     
0052: 30       HALT                     
0053: 30       HALT                     
0054: 30       HALT                     
0055: 30       HALT                     
0056: 30       HALT                     
0057: 30       HALT                     
0058: 30       HALT                     
0059: 30       HALT                     
005A: 30       HALT                     
005B: 30       HALT                     
005C: 30       HALT                     
005D: 30       HALT                     
005E: 30       HALT                     
005F: 30       HALT                     
0060: 7E       RETI                     (0140)     reti
                                        (0141) 
                                        (0142)     org   64h                      ;Sleep Timer Interrupt Vector
                                        (0143)     // call	void_handler
0061: 30       HALT                     
0062: 30       HALT                     
0063: 30       HALT                     
0064: 7E       RETI                     (0144)     reti
                                        (0145) 
                                        (0146) ;-----------------------------------------------------------------------------
                                        (0147) ;  Start of Execution.
                                        (0148) ;-----------------------------------------------------------------------------
                                        (0149) ;  The Supervisory ROM SWBootReset function has already completed the
                                        (0150) ;  calibrate1 process, loading trim values for 5 volt operation.
                                        (0151) ;
                                        (0152) 
                                        (0153) IF	(TOOLCHAIN & HITECH)
                                        (0154)  	AREA PD_startup(CODE, REL, CON)
                                        (0155) ELSE
                                        (0156)     org 68h
                                        (0157) ENDIF
                                        (0158) __Start:
                                        (0159) 
                                        (0160)     ; initialize SMP values for voltage stabilization, if required,
                                        (0161)     ; leaving power-on reset (POR) level at the default (low) level, at
                                        (0162)     ; least for now. 
                                        (0163)     ;
0065: 30       HALT                     
0066: 30       HALT                     
0067: 30       HALT                     
0068: 71 10    OR    F,0x10             (0164)     M8C_SetBank1
006A: 62 E3 87 MOV   REG[0xE3],0x87     (0165)     mov   reg[VLT_CR], SWITCH_MODE_PUMP_JUST | LVD_TBEN_JUST | TRIP_VOLTAGE_JUST
006D: 70 EF    AND   F,0xEF             (0166)     M8C_SetBank0
006F: 62 E3 38 MOV   REG[0xE3],0x38     (0167) M8C_ClearWDTAndSleep
                                        (0168) 
                                        (0169) IF ( WATCHDOG_ENABLE )             ; WDT selected in Global Params
                                        (0170)     M8C_EnableWatchDog
                                        (0171) ENDIF
                                        (0172) 
0072: 41 FE FB AND   REG[0xFE],0xFB     (0173)     and  reg[CPU_SCR1], ~CPU_SCR1_ECO_ALLOWED  ; Prevent ECO from being enabled
                                        (0174) 
                                        (0175)     ;---------------------------
                                        (0176)     ; Set up the Temporary stack
                                        (0177)     ;---------------------------
                                        (0178)     ; A temporary stack is set up for the SSC instructions.
                                        (0179)     ; The real stack start will be assigned later.
                                        (0180)     ;
                                        (0181) _stack_start:          equ 80h
0075: 50 80    MOV   A,0x80             (0182)     mov   A, _stack_start          ; Set top of stack to end of used RAM
0077: 4E       SWAP  SP,A               (0183)     swap  SP, A                    ; This is only temporary if going to LMM
                                        (0184) 
                                        (0185)     ;------------------------
                                        (0186)     ; Set Power-related Trim 
                                        (0187)     ;------------------------
                                        (0188)     
0078: 62 E3 38 MOV   REG[0xE3],0x38     (0189) M8C_ClearWDTAndSleep
                                        (0190) 
                                        (0191) IF ( POWER_SETTING & POWER_SET_5V0)            ; *** 5.0 Volt operation   ***
                                        (0192)  IF ( POWER_SETTING & POWER_SET_SLOW_IMO)      ; *** 6MHZ Main Oscillator ***
                                        (0193)     or  reg[CPU_SCR1], CPU_SCR1_SLIMO
                                        (0194)     M8SSC_Set2TableTrims 2, SSCTBL2_TRIM_IMO_5V_6MHZ, 1, SSCTBL1_TRIM_BGR_5V
                                        (0195)  ENDIF
                                        (0196) ENDIF ; 5.0 V Operation
                                        (0197) 
                                        (0198) IF ( POWER_SETTING & POWER_SET_3V3)            ; *** 3.3 Volt operation   ***
                                        (0199)  IF ( POWER_SETTING & POWER_SET_SLOW_IMO)      ; *** 6MHZ Main Oscillator ***
                                        (0200)     or  reg[CPU_SCR1], CPU_SCR1_SLIMO
                                        (0201)     M8SSC_Set2TableTrims 2, SSCTBL2_TRIM_IMO_3V_6MHZ, 1, SSCTBL1_TRIM_BGR_3V
                                        (0202)  ELSE                                          ; *** 12MHZ Main Oscillator ***
                                        (0203)     M8SSC_SetTableTrims  1, SSCTBL1_TRIM_IMO_3V_24MHZ, SSCTBL1_TRIM_BGR_3V
                                        (0204)  ENDIF
                                        (0205) ENDIF ; 3.3 Volt Operation
                                        (0206) 
                                        (0207) IF ( POWER_SETTING & POWER_SET_2V7_12MHZ)      ; *** 2.7 Volts / 12MHZ operation ***
                                        (0208)     or  reg[CPU_SCR1], CPU_SCR1_SLIMO
                                        (0209)     M8SSC_SetTableTrims  2, SSCTBL2_TRIM_IMO_2V_12MHZ, SSCTBL2_TRIM_BGR_2V
                                        (0210) ENDIF ; *** 2.7 Volts / 12MHZ operation ***
                                        (0211) 
                                        (0212) IF ( POWER_SETTING & POWER_SET_2V7_6MHZ)       ; *** 2.7 Volts /  6MHZ operation ***
                                        (0213)     or  reg[CPU_SCR1], CPU_SCR1_SLIMO
                                        (0214)     M8SSC_SetTableTrims  2, SSCTBL2_TRIM_IMO_2V_6MHZ,  SSCTBL2_TRIM_BGR_2V
                                        (0215) ENDIF ; *** 2.7 Volts /  6MHZ operation ***
                                        (0216) 
007B: 55 F8 00 MOV   [iles+233],0x0     (0217)     mov  [bSSC_KEY1],  0           ; Lock out Flash and Supervisiory operations
007E: 55 F9 00 MOV   [iles+234],0x0     (0218)     mov  [bSSC_KEYSP], 0
                                        (0219) 
                                        (0220)     ;---------------------------------------
                                        (0221)     ; Initialize Crystal Oscillator and PLL
                                        (0222)     ;---------------------------------------
                                        (0223) IF ( POWER_SETTING & POWER_SET_2V7)       ; *** 2.7 Volts  ***
                                        (0224)     M8C_SetBank1
                                        (0225)     mov   reg[OSC_CR0], (SLEEP_TIMER_JUST | OSC_CR0_CPU_3MHz)
                                        (0226)     M8C_SetBank0
                                        (0227)     M8C_ClearWDTAndSleep           ; Reset the watch dog
                                        (0228) 
                                        (0229) ELSE 	 ;*** all other voltages OK for 12Mhz ***
0081: 71 10    OR    F,0x10             (0230)     M8C_SetBank1
0083: 62 E0 02 MOV   REG[0xE0],0x2      (0231)     mov   reg[OSC_CR0], (SLEEP_TIMER_JUST | OSC_CR0_CPU_12MHz)
0086: 70 EF    AND   F,0xEF             (0232)     M8C_SetBank0
0088: 62 E3 38 MOV   REG[0xE3],0x38     (0233)     M8C_ClearWDTAndSleep           ; Reset the watch dog
                                        (0234) 
                                        (0235) ENDIF
                                        (0236) 
                                        (0237) IF	(TOOLCHAIN & HITECH)
                                        (0238)     ;---------------------------------------------
                                        (0239)     ; HI-TECH initialization: Enter the Large Memory Model, if applicable
                                        (0240)     ;---------------------------------------------
                                        (0241) 	global		__Lstackps
                                        (0242) 	mov     a,low __Lstackps
                                        (0243) 	swap    a,sp
                                        (0244) 
                                        (0245) IF ( SYSTEM_LARGE_MEMORY_MODEL )
                                        (0246)     RAM_SETPAGE_STK SYSTEM_STACK_PAGE      ; relocate stack page ...
                                        (0247)     RAM_SETPAGE_IDX2STK            ; initialize other page pointers
                                        (0248)     RAM_SETPAGE_CUR 0
                                        (0249)     RAM_SETPAGE_MVW 0
                                        (0250)     RAM_SETPAGE_MVR 0
                                        (0251)     IF ( SYSTEM_IDXPG_TRACKS_STK_PP ); Now enable paging:
                                        (0252)       or    F, FLAG_PGMODE_11b       ; LMM w/ IndexPage<==>StackPage
                                        (0253)     ELSE
                                        (0254)       or    F, FLAG_PGMODE_10b       ; LMM w/ independent IndexPage
                                        (0255)     ENDIF ;  SYSTEM_IDXPG_TRACKS_STK_PP
                                        (0256) ENDIF ;  SYSTEM_LARGE_MEMORY_MODEL
                                        (0257) ELSE
                                        (0258)     ;---------------------------------------------
                                        (0259)     ; ImageCraft Enter the Large Memory Model, if applicable
                                        (0260)     ;---------------------------------------------
                                        (0261) IF ( SYSTEM_LARGE_MEMORY_MODEL )
008B: 62 D1 01 MOV   REG[0xD1],0x1      (0262)     RAM_SETPAGE_STK SYSTEM_STACK_PAGE      ; relocate stack page ...
008E: 50 00    MOV   A,0x0              (0263)     mov   A, SYSTEM_STACK_BASE_ADDR        ;   and offset, if any
0090: 4E       SWAP  SP,A               (0264)     swap  A, SP
0091: 62 D3 01 MOV   REG[0xD3],0x1      (0265)     RAM_SETPAGE_IDX2STK            ; initialize other page pointers
0094: 62 D0 00 MOV   REG[0xD0],0x0      (0266)     RAM_SETPAGE_CUR 0
0097: 62 D5 00 MOV   REG[0xD5],0x0      (0267)     RAM_SETPAGE_MVW 0
009A: 62 D4 00 MOV   REG[0xD4],0x0      (0268)     RAM_SETPAGE_MVR 0
                                        (0269) 
                                        (0270)   IF ( SYSTEM_IDXPG_TRACKS_STK_PP ); Now enable paging:
009D: 71 C0    OR    F,0xC0             (0271)     or    F, FLAG_PGMODE_11b       ; LMM w/ IndexPage<==>StackPage
                                        (0272)   ELSE
                                        (0273)     or    F, FLAG_PGMODE_10b       ; LMM w/ independent IndexPage
                                        (0274)   ENDIF ;  SYSTEM_IDXPG_TRACKS_STK_PP
                                        (0275) ELSE
                                        (0276)     mov   A, __ramareas_end        ; Set top of stack to end of used RAM
                                        (0277)     swap  SP, A
                                        (0278) ENDIF ;  SYSTEM_LARGE_MEMORY_MODEL
                                        (0279) ENDIF ;	TOOLCHAIN
                                        (0280) 
                                        (0281)     ;-------------------------
                                        (0282)     ; Load Base Configuration
                                        (0283)     ;-------------------------
                                        (0284)     ; Load global parameter settings and load the user modules in the
                                        (0285)     ; base configuration. Exceptions: (1) Leave CPU Speed fast as possible
                                        (0286)     ; to minimize start up time; (2) We may still need to play with the
                                        (0287)     ; Sleep Timer.
                                        (0288)     ;
009F: 7C 02 1D LCALL 0x021D             (0289)     lcall LoadConfigInit
                                        (0290) 
                                        (0291)     ;-----------------------------------
                                        (0292)     ; Initialize C Run-Time Environment
                                        (0293)     ;-----------------------------------
                                        (0294) IF ( C_LANGUAGE_SUPPORT )
                                        (0295) IF ( SYSTEM_SMALL_MEMORY_MODEL )
                                        (0296)     mov  A,0                           ; clear the 'bss' segment to zero
                                        (0297)     mov  [__r0],<__bss_start
                                        (0298) BssLoop:
                                        (0299)     cmp  [__r0],<__bss_end
                                        (0300)     jz   BssDone
                                        (0301)     mvi  [__r0],A
                                        (0302)     jmp  BssLoop
                                        (0303) BssDone:
                                        (0304)     mov  A,>__idata_start              ; copy idata to data segment
                                        (0305)     mov  X,<__idata_start
                                        (0306)     mov  [__r0],<__data_start
                                        (0307) IDataLoop:
                                        (0308)     cmp  [__r0],<__data_end
                                        (0309)     jz   C_RTE_Done
                                        (0310)     push A
                                        (0311)     romx
                                        (0312)     mvi  [__r0],A
                                        (0313)     pop  A
                                        (0314)     inc  X
                                        (0315)     adc  A,0
                                        (0316)     jmp  IDataLoop
                                        (0317) 
                                        (0318) ENDIF ; SYSTEM_SMALL_MEMORY_MODEL
                                        (0319) 
                                        (0320) IF ( SYSTEM_LARGE_MEMORY_MODEL )
00A2: 62 D0 00 MOV   REG[0xD0],0x0      (0321)     mov   reg[CUR_PP], >__r0           ; force direct addr mode instructions
                                        (0322)                                        ; to use the Virtual Register page.
                                        (0323) 
                                        (0324)     ; Dereference the constant (flash) pointer pXIData to access the start
                                        (0325)     ; of the extended idata area, "xidata." Xidata follows the end of the
                                        (0326)     ; text segment and may have been relocated by the Code Compressor.
                                        (0327)     ;
00A5: 50 02    MOV   A,0x2              (0328)     mov   A, >__pXIData                ; Get the address of the flash
00A7: 57 1B    MOV   X,0x1B             (0329)     mov   X, <__pXIData                ;   pointer to the xidata area.
00A9: 08       PUSH  A                  (0330)     push  A
00AA: 28       ROMX                     (0331)     romx                               ; get the MSB of xidata's address
00AB: 53 01    MOV   [__r0],A           (0332)     mov   [__r0], A
00AD: 18       POP   A                  (0333)     pop   A
00AE: 75       INC   X                  (0334)     inc   X
00AF: 09 00    ADC   A,0x0              (0335)     adc   A, 0
00B1: 28       ROMX                     (0336)     romx                               ; get the LSB of xidata's address
00B2: 4B       SWAP  A,X                (0337)     swap  A, X
00B3: 51 01    MOV   A,[__r0]           (0338)     mov   A, [__r0]                    ; pXIData (in [A,X]) points to the
                                        (0339)                                        ;   XIData structure list in flash
00B5: 80 04    JMP   0x00BA             (0340)     jmp   .AccessStruct
                                        (0341) 
                                        (0342)     ; Unpack one element in the xidata "structure list" that specifies the
                                        (0343)     ; values of C variables. Each structure contains 3 member elements.
                                        (0344)     ; The first is a pointer to a contiguous block of RAM to be initial-
                                        (0345)     ; ized. Blocks are always 255 bytes or less in length and never cross
                                        (0346)     ; RAM page boundaries. The list terminates when the MSB of the pointer
                                        (0347)     ; contains 0xFF. There are two formats for the struct depending on the
                                        (0348)     ; value in the second member element, an unsigned byte:
                                        (0349)     ; (1) If the value of the second element is non-zero, it represents
                                        (0350)     ; the 'size' of the block of RAM to be initialized. In this case, the
                                        (0351)     ; third member of the struct is an array of bytes of length 'size' and
                                        (0352)     ; the bytes are copied to the block of RAM.
                                        (0353)     ; (2) If the value of the second element is zero, the block of RAM is
                                        (0354)     ; to be cleared to zero. In this case, the third member of the struct
                                        (0355)     ; is an unsigned byte containing the number of bytes to clear.
                                        (0356) 
                                        (0357) .AccessNextStructLoop:
00B7: 75       INC   X                  (0358)     inc   X                            ; pXIData++
00B8: 09 00    ADC   A,0x0              (0359)     adc   A, 0
                                        (0360) .AccessStruct:                         ; Entry point for first block
                                        (0361)     ;
                                        (0362)     ; Assert: pXIData in [A,X] points to the beginning of an XIData struct.
                                        (0363)     ;
00BA: 62 E3 00 MOV   REG[0xE3],0x0      (0364)     M8C_ClearWDT                       ; Clear the watchdog for long inits
00BD: 08       PUSH  A                  (0365)     push  A
00BE: 28       ROMX                     (0366)     romx                               ; MSB of RAM addr (CPU.A <- *pXIData)
00BF: 60 D5    MOV   REG[0xD5],A        (0367)     mov   reg[MVW_PP], A               ;   for use with MVI write operations
00C1: 74       INC   A                  (0368)     inc   A                            ; End of Struct List? (MSB==0xFF?)
00C2: A0 4B    JZ    0x010E             (0369)     jz    .C_RTE_WrapUp                ;   Yes, C runtime environment complete
00C4: 18       POP   A                  (0370)     pop   A                            ; restore pXIData to [A,X]
00C5: 75       INC   X                  (0371)     inc   X                            ; pXIData++
00C6: 09 00    ADC   A,0x0              (0372)     adc   A, 0
00C8: 08       PUSH  A                  (0373)     push  A
00C9: 28       ROMX                     (0374)     romx                               ; LSB of RAM addr (CPU.A <- *pXIData)
00CA: 53 01    MOV   [__r0],A           (0375)     mov   [__r0], A                    ; RAM Addr now in [reg[MVW_PP],[__r0]]
00CC: 18       POP   A                  (0376)     pop   A                            ; restore pXIData to [A,X]
00CD: 75       INC   X                  (0377)     inc   X                            ; pXIData++ (point to size)
00CE: 09 00    ADC   A,0x0              (0378)     adc   A, 0
00D0: 08       PUSH  A                  (0379)     push  A
00D1: 28       ROMX                     (0380)     romx                               ; Get the size (CPU.A <- *pXIData)
00D2: A0 1C    JZ    0x00EF             (0381)     jz    .ClearRAMBlockToZero         ; If Size==0, then go clear RAM
00D4: 53 00    MOV   [__r1],A           (0382)     mov   [__r1], A                    ;             else downcount in __r1
00D6: 18       POP   A                  (0383)     pop   A                            ; restore pXIData to [A,X]
                                        (0384) 
                                        (0385) .CopyNextByteLoop:
                                        (0386)     ; For each byte in the structure's array member, copy from flash to RAM.
                                        (0387)     ; Assert: pXIData in [A,X] points to previous byte of flash source;
                                        (0388)     ;         [reg[MVW_PP],[__r0]] points to next RAM destination;
                                        (0389)     ;         __r1 holds a non-zero count of the number of bytes remaining.
                                        (0390)     ;
00D7: 75       INC   X                  (0391)     inc   X                            ; pXIData++ (point to next data byte)
00D8: 09 00    ADC   A,0x0              (0392)     adc   A, 0
00DA: 08       PUSH  A                  (0393)     push  A
00DB: 28       ROMX                     (0394)     romx                               ; Get the data value (CPU.A <- *pXIData)
00DC: 3F 01    MVI   [__r0],A           (0395)     mvi   [__r0], A                    ; Transfer the data to RAM
00DE: 47 01 FF TST   [__r0],0xFF        (0396)     tst   [__r0], 0xff                 ; Check for page crossing
00E1: B0 06    JNZ   0x00E8             (0397)     jnz   .CopyLoopTail                ;   No crossing, keep going
00E3: 5D D5    MOV   A,REG[0xD5]        (0398)     mov   A, reg[ MVW_PP]              ;   If crossing, bump MVW page reg
00E5: 74       INC   A                  (0399)     inc   A
00E6: 60 D5    MOV   REG[0xD5],A        (0400)     mov   reg[ MVW_PP], A
                                        (0401) .CopyLoopTail:
00E8: 18       POP   A                  (0402)     pop   A                            ; restore pXIData to [A,X]
00E9: 7A 00    DEC   [__r1]             (0403)     dec   [__r1]                       ; End of this array in flash?
00EB: BF EB    JNZ   0x00D7             (0404)     jnz   .CopyNextByteLoop            ;   No,  more bytes to copy
00ED: 8F C9    JMP   0x00B7             (0405)     jmp   .AccessNextStructLoop        ;   Yes, initialize another RAM block
                                        (0406) 
                                        (0407) .ClearRAMBlockToZero:
00EF: 18       POP   A                  (0408)     pop   A                            ; restore pXIData to [A,X]
00F0: 75       INC   X                  (0409)     inc   X                            ; pXIData++ (point to next data byte)
00F1: 09 00    ADC   A,0x0              (0410)     adc   A, 0
00F3: 08       PUSH  A                  (0411)     push  A
00F4: 28       ROMX                     (0412)     romx                               ; Get the run length (CPU.A <- *pXIData)
00F5: 53 00    MOV   [__r1],A           (0413)     mov   [__r1], A                    ; Initialize downcounter
00F7: 50 00    MOV   A,0x0              (0414)     mov   A, 0                         ; Initialize source data
                                        (0415) 
                                        (0416) .ClearRAMBlockLoop:
                                        (0417)     ; Assert: [reg[MVW_PP],[__r0]] points to next RAM destination and
                                        (0418)     ;         __r1 holds a non-zero count of the number of bytes remaining.
                                        (0419)     ;
00F9: 3F 01    MVI   [__r0],A           (0420)     mvi   [__r0], A                    ; Clear a byte
00FB: 47 01 FF TST   [__r0],0xFF        (0421)     tst   [__r0], 0xff                 ; Check for page crossing
00FE: B0 08    JNZ   0x0107             (0422)     jnz   .ClearLoopTail               ;   No crossing, keep going
0100: 5D D5    MOV   A,REG[0xD5]        (0423)     mov   A, reg[ MVW_PP]              ;   If crossing, bump MVW page reg
0102: 74       INC   A                  (0424)     inc   A
0103: 60 D5    MOV   REG[0xD5],A        (0425)     mov   reg[ MVW_PP], A
0105: 50 00    MOV   A,0x0              (0426)     mov   A, 0                         ; Restore the zero used for clearing
                                        (0427) .ClearLoopTail:
0107: 7A 00    DEC   [__r1]             (0428)     dec   [__r1]                       ; Was this the last byte?
0109: BF EF    JNZ   0x00F9             (0429)     jnz   .ClearRAMBlockLoop           ;   No,  continue
010B: 18       POP   A                  (0430)     pop   A                            ;   Yes, restore pXIData to [A,X] and
010C: 8F AA    JMP   0x00B7             (0431)     jmp   .AccessNextStructLoop        ;        initialize another RAM block
                                        (0432) 
                                        (0433) .C_RTE_WrapUp:
010E: 18       POP   A                  (0434)     pop   A                            ; balance stack
                                        (0435) 
                                        (0436) ENDIF ; SYSTEM_LARGE_MEMORY_MODEL
                                        (0437) 
                                        (0438) C_RTE_Done:
                                        (0439) 
                                        (0440) ENDIF ; C_LANGUAGE_SUPPORT
                                        (0441) 
                                        (0442)     ;-------------------------------
                                        (0443)     ; Voltage Stabilization for SMP
                                        (0444)     ;-------------------------------
                                        (0445) 
                                        (0446) IF ( POWER_SETTING & POWER_SET_5V0)    ; 5.0V Operation
                                        (0447) IF ( SWITCH_MODE_PUMP ^ 1 )            ; SMP is operational
                                        (0448)     ;- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
                                        (0449)     ; When using the SMP at 5V, we must wait for Vdd to slew from 3.1V to
                                        (0450)     ; 5V before enabling the Precision Power-On Reset (PPOR).
                                        (0451)     ;- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
                                        (0452)     or   reg[INT_MSK0],INT_MSK0_SLEEP
                                        (0453)     M8C_SetBank1
                                        (0454)     and   reg[OSC_CR0], ~OSC_CR0_SLEEP
                                        (0455)     or    reg[OSC_CR0],  OSC_CR0_SLEEP_512Hz
                                        (0456)     M8C_SetBank0
                                        (0457)     M8C_ClearWDTAndSleep                   ; Restart the sleep timer
                                        (0458)     mov   reg[INT_VC], 0                   ; Clear all pending interrupts
                                        (0459) .WaitFor2ms:
                                        (0460)     tst   reg[INT_CLR0], INT_MSK0_SLEEP    ; Test the SleepTimer Interrupt Status
                                        (0461)     jz   .WaitFor2ms                       ; Branch fails when 2 msec has passed
                                        (0462) ENDIF ; SMP is operational
                                        (0463) ENDIF ; 5.0V Operation
                                        (0464) 
                                        (0465)     ;-------------------------------
                                        (0466)     ; Set Power-On Reset (POR) Level
                                        (0467)     ;-------------------------------
                                        (0468) 
                                        (0469)     ;  The writes to the VLT_CR register below include setting the POR to VLT_CR_POR_HIGH,
                                        (0470)     ;  VLT_CR_POR_MID or VLT_CR_POR_LOW. Correctly setting this value is critical to the proper
                                        (0471)     ;  operation of the PSoC. The POR protects the M8C from mis-executing when Vdd falls low. These
                                        (0472)     ;  values should not be changed from the settings here. Failure to follow this instruction could 
                                        (0473)     ;  lead to corruption of PSoC flash.
                                        (0474) 
010F: 71 10    OR    F,0x10             (0475)     M8C_SetBank1
                                        (0476) 
                                        (0477) IF (POWER_SETTING & POWER_SET_2V7)             ; 2.7V Operation?
                                        (0478)                                                ;  Yes, lowest trip already set
                                        (0479) ELSE                                           ;   No, must adjust POR...
                                        (0480) IF (POWER_SETTING & POWER_SET_3V3)             ; 3.3V Operation?
                                        (0481)     or   reg[VLT_CR], VLT_CR_POR_MID           ;   Yes, change to midpoint trip
                                        (0482) ELSE
                                        (0483) IF (POWER_SETTING & POWER_SET_5V0)             ; 5.0V Operation?
                                        (0484)  IF (POWER_SETTING & POWER_SET_SLOW_IMO)       ; and Slow Mode?
                                        (0485)     or   reg[VLT_CR], VLT_CR_POR_MID           ;   Yes, set to midpoint trip
                                        (0486)  ELSE                                          ;    No, fast mode
                                        (0487)   IF ( CPU_CLOCK_JUST ^ OSC_CR0_CPU_24MHz )    ;      As fast as 24MHz?
0111: 43 E3 10 OR    REG[0xE3],0x10     (0488)     or   reg[VLT_CR], VLT_CR_POR_MID           ;         No, change to midpoint trip
                                        (0489)   ELSE ; 24HMz                                 ;
                                        (0490)     or    reg[VLT_CR], VLT_CR_POR_HIGH         ;        Yes, switch to	highest setting
                                        (0491)   ENDIF ; 24MHz
                                        (0492)  ENDIF ; Slow Mode
                                        (0493) ENDIF ; 5.0V Operation
                                        (0494) ENDIF ; 3.3V Operation
                                        (0495) ENDIF ; 2.7V Operation
                                        (0496) 
0114: 70 EF    AND   F,0xEF             (0497)     M8C_SetBank0
                                        (0498) 
                                        (0499)     ;----------------------------
                                        (0500)     ; Wrap up and invoke "main"
                                        (0501)     ;----------------------------
                                        (0502) 
                                        (0503)     ; Disable the Sleep interrupt that was used for timing above.  In fact,
                                        (0504)     ; no interrupts should be enabled now, so may as well clear the register.
                                        (0505)     ;
0116: 62 E0 00 MOV   REG[0xE0],0x0      (0506)     mov  reg[INT_MSK0],0
                                        (0507) 
                                        (0508)     ; Everything has started OK. Now select requested CPU & sleep frequency.
                                        (0509)     ;
0119: 71 10    OR    F,0x10             (0510)     M8C_SetBank1
011B: 62 E0 00 MOV   REG[0xE0],0x0      (0511)     mov  reg[OSC_CR0],(SLEEP_TIMER_JUST | CPU_CLOCK_JUST)
011E: 70 EF    AND   F,0xEF             (0512)     M8C_SetBank0
                                        (0513) 
                                        (0514)     ; Global Interrupt are NOT enabled, this should be done in main().
                                        (0515)     ; LVD is set but will not occur unless Global Interrupts are enabled.
                                        (0516)     ; Global Interrupts should be enabled as soon as possible in main().
                                        (0517)     ;
0120: 62 E2 00 MOV   REG[0xE2],0x0      (0518)     mov  reg[INT_VC],0             ; Clear any pending interrupts which may
                                        (0519)                                    ; have been set during the boot process.
                                        (0520) IF	(TOOLCHAIN & HITECH)
                                        (0521) 	ljmp  startup                  ; Jump to C compiler startup code
                                        (0522) ELSE
                                        (0523) IF ENABLE_LJMP_TO_MAIN
                                        (0524)     ljmp  _main                    ; goto main (no return)
                                        (0525) ELSE
0123: 7C 02 C6 LCALL _main|__text_start|_main(0526)     lcall _main                    ; call main
                                        (0527) .Exit:
0126: 8F FF    JMP   0x0126             (0528)     jmp  .Exit                     ; Wait here after return till power-off or reset
                                        (0529) ENDIF
                                        (0530) ENDIF ; TOOLCHAIN
                                        (0531) 
                                        (0532)     ;---------------------------------
                                        (0533)     ; Library Access to Global Parms
                                        (0534)     ;---------------------------------
                                        (0535)     ;
                                        (0536)  bGetPowerSetting:
                                        (0537) _bGetPowerSetting:
                                        (0538)     ; Returns value of POWER_SETTING in the A register.
                                        (0539)     ; No inputs. No Side Effects.
                                        (0540)     ;
                                        (0541) IF (POWER_SETTING & POWER_SET_2V7)
                                        (0542)     mov   A, POWER_SETTING | POWER_SET_SLOW_IMO
                                        (0543) ELSE
0128: 50 10    MOV   A,0x10             (0544)     mov   A, POWER_SETTING          ; Supply voltage and internal main osc
                                        (0545) ENDIF
012A: 7F       RET                      (0546)     ret
(0547) 
(0548) IF	(TOOLCHAIN & HITECH)
(0549) ELSE
(0550)     ;---------------------------------
(0551)     ; Order Critical RAM & ROM AREAs
(0552)     ;---------------------------------
(0553)     ;  'TOP' is all that has been defined so far...
(0554) 
(0555)     ;  ROM AREAs for C CONST, static & global items
(0556)     ;
(0557)     AREA lit               (ROM, REL, CON)   ; 'const' definitions
(0558)     AREA idata             (ROM, REL, CON)   ; Constants for initializing RAM
(0559) __idata_start:
(0560) 
(0561)     AREA func_lit          (ROM, REL, CON)   ; Function Pointers
(0562) __func_lit_start:
(0563) 
(0564) IF ( SYSTEM_LARGE_MEMORY_MODEL )
(0565)     ; We use the func_lit area to store a pointer to extended initialized
(0566)     ; data (xidata) area that follows the text area. Func_lit isn't
(0567)     ; relocated by the code compressor, but the text area may shrink and
(0568)     ; that moves xidata around.
(0569)     ;
(0570) __pXIData:         word __text_end           ; ptr to extended idata
(0571) ENDIF
(0572) 
(0573)     AREA psoc_config       (ROM, REL, CON)   ; Configuration Load & Unload
(0574)     AREA UserModules       (ROM, REL, CON)   ; User Module APIs
(0575) 
(0576)     ; CODE segment for general use
(0577)     ;
(0578)     AREA text (ROM, REL, CON)
(0579) __text_start:
(0580) 
(0581)     ; RAM area usage
(0582)     ;
(0583)     AREA data              (RAM, REL, CON)   ; initialized RAM
(0584) __data_start:
(0585) 
(0586)     AREA virtual_registers (RAM, REL, CON)   ; Temp vars of C compiler
(0587)     AREA InterruptRAM      (RAM, REL, CON)   ; Interrupts, on Page 0
(0588)     AREA bss               (RAM, REL, CON)   ; general use
(0589) __bss_start:
(0590) ENDIF ; TOOLCHAIN
(0591) ; end of file boot.asm
FILE: lib\psocconfigtbl.asm
                                        (0001) ; Generated by PSoC Designer 5.0.1127.0
                                        (0002) ;
                                        (0003) include "m8c.inc"
                                        (0004) ;  Personalization tables 
                                        (0005) export LoadConfigTBL_psoc_101_ledblinking_Bank1
                                        (0006) export LoadConfigTBL_psoc_101_ledblinking_Bank0
                                        (0007) export LoadConfigTBL_psoc_101_ledblinking_Ordered
                                        (0008) AREA lit(rom, rel)
                                        (0009) LoadConfigTBL_psoc_101_ledblinking_Bank0:
                                        (0010) ;  Instance name LED_PWM, User Module PWM8
                                        (0011) ;       Instance name LED_PWM, Block Name PWM8(DBB00)
                                        (0012) 	db		23h, 00h		;LED_PWM_CONTROL_REG(DBB00CR0)
                                        (0013) 	db		21h, feh		;LED_PWM_PERIOD_REG(DBB00DR1)
                                        (0014) 	db		22h, 7fh		;LED_PWM_COMPARE_REG(DBB00DR2)
                                        (0015) ;  Global Register values Bank 0
                                        (0016) 	db		60h, 09h		; AnalogColumnInputSelect register (AMX_IN)
                                        (0017) 	db		64h, 00h		; AnalogComparatorControl0 register (CMP_CR0)
                                        (0018) 	db		66h, 00h		; AnalogComparatorControl1 register (CMP_CR1)
                                        (0019) 	db		61h, 00h		; AnalogMuxBusConfig register (AMUXCFG)
                                        (0020) 	db		e6h, 00h		; DecimatorControl_0 register (DEC_CR0)
                                        (0021) 	db		e7h, 00h		; DecimatorControl_1 register (DEC_CR1)
                                        (0022) 	db		d6h, 00h		; I2CConfig register (I2CCFG)
                                        (0023) 	db		62h, 00h		; PWM_Control register (PWM_CR)
                                        (0024) 	db		b0h, 00h		; Row_0_InputMux register (RDI0RI)
                                        (0025) 	db		b1h, 00h		; Row_0_InputSync register (RDI0SYN)
                                        (0026) 	db		b2h, 00h		; Row_0_LogicInputAMux register (RDI0IS)
                                        (0027) 	db		b3h, 33h		; Row_0_LogicSelect_0 register (RDI0LT0)
                                        (0028) 	db		b4h, 33h		; Row_0_LogicSelect_1 register (RDI0LT1)
                                        (0029) 	db		b5h, 08h		; Row_0_OutputDrive_0 register (RDI0SRO0)
                                        (0030) 	db		b6h, 00h		; Row_0_OutputDrive_1 register (RDI0SRO1)
                                        (0031) 	db		ffh
                                        (0032) LoadConfigTBL_psoc_101_ledblinking_Bank1:
                                        (0033) ;  Instance name LED_PWM, User Module PWM8
                                        (0034) ;       Instance name LED_PWM, Block Name PWM8(DBB00)
                                        (0035) 	db		20h, 21h		;LED_PWM_FUNC_REG(DBB00FN)
                                        (0036) 	db		21h, 11h		;LED_PWM_INPUT_REG(DBB00IN)
                                        (0037) 	db		22h, 44h		;LED_PWM_OUTPUT_REG(DBB00OU)
                                        (0038) ;  Global Register values Bank 1
                                        (0039) 	db		61h, 00h		; AnalogClockSelect1 register (CLK_CR1)
                                        (0040) 	db		6bh, 00h		; AnalogColumnClockDivide register (CLK_CR3)
                                        (0041) 	db		60h, 00h		; AnalogColumnClockSelect register (CLK_CR0)
                                        (0042) 	db		62h, 00h		; AnalogIOControl_0 register (ABF_CR0)
                                        (0043) 	db		67h, 33h		; AnalogLUTControl0 register (ALT_CR0)
                                        (0044) 	db		64h, 00h		; ComparatorGlobalOutEn register (CMP_GO_EN)
                                        (0045) 	db		fdh, 00h		; DAC_Control register (DAC_CR)
                                        (0046) 	db		d1h, 00h		; GlobalDigitalInterconnect_Drive_Even_Input register (GDI_E_IN)
                                        (0047) 	db		d3h, 00h		; GlobalDigitalInterconnect_Drive_Even_Output register (GDI_E_OU)
                                        (0048) 	db		d0h, 00h		; GlobalDigitalInterconnect_Drive_Odd_Input register (GDI_O_IN)
                                        (0049) 	db		d2h, 00h		; GlobalDigitalInterconnect_Drive_Odd_Output register (GDI_O_OU)
                                        (0050) 	db		e1h, ffh		; OscillatorControl_1 register (OSC_CR1)
                                        (0051) 	db		e2h, 00h		; OscillatorControl_2 register (OSC_CR2)
                                        (0052) 	db		dfh, 12h		; OscillatorControl_3 register (OSC_CR3)
                                        (0053) 	db		deh, 02h		; OscillatorControl_4 register (OSC_CR4)
                                        (0054) 	db		ddh, 00h		; OscillatorGlobalBusEnableControl register (OSC_GO_EN)
                                        (0055) 	db		d8h, 00h		; Port_0_MUXBusCtrl register (MUX_CR0)
                                        (0056) 	db		d9h, 00h		; Port_1_MUXBusCtrl register (MUX_CR1)
                                        (0057) 	db		dah, 00h		; Port_2_MUXBusCtrl register (MUX_CR2)
                                        (0058) 	db		dbh, 00h		; Port_3_MUXBusCtrl register (MUX_CR3)
                                        (0059) 	db		ffh
                                        (0060) LoadConfigTBL_psoc_101_ledblinking_Ordered:
                                        (0061) ;  Ordered Global Register values

(0062) 	M8C_SetBank1
01A5: 10       PUSH  X                  
01A6: 62 00 00 MOV   REG[0x0],0x0       (0063) 	mov	reg[00h], 00h		; Port_0_DriveMode_0 register (PRT0DM0)
01A9: 62 01 FF MOV   REG[0x1],0xFF      (0064) 	mov	reg[01h], ffh		; Port_0_DriveMode_1 register (PRT0DM1)
01AC: 70 EF    AND   F,0xEF             (0065) 	M8C_SetBank0
01AE: 62 03 FF MOV   REG[0x3],0xFF      (0066) 	mov	reg[03h], ffh		; Port_0_DriveMode_2 register (PRT0DM2)
01B1: 62 02 00 MOV   REG[0x2],0x0       (0067) 	mov	reg[02h], 00h		; Port_0_GlobalSelect register (PRT0GS)
01B4: 71 10    OR    F,0x10             (0068) 	M8C_SetBank1
01B6: 62 02 00 MOV   REG[0x2],0x0       (0069) 	mov	reg[02h], 00h		; Port_0_IntCtrl_0 register (PRT0IC0)
01B9: 62 03 00 MOV   REG[0x3],0x0       (0070) 	mov	reg[03h], 00h		; Port_0_IntCtrl_1 register (PRT0IC1)
01BC: 70 EF    AND   F,0xEF             (0071) 	M8C_SetBank0
01BE: 62 01 00 MOV   REG[0x1],0x0       (0072) 	mov	reg[01h], 00h		; Port_0_IntEn register (PRT0IE)
01C1: 71 10    OR    F,0x10             (0073) 	M8C_SetBank1
01C3: 62 04 14 MOV   REG[0x4],0x14      (0074) 	mov	reg[04h], 14h		; Port_1_DriveMode_0 register (PRT1DM0)
01C6: 62 05 EB MOV   REG[0x5],0xEB      (0075) 	mov	reg[05h], ebh		; Port_1_DriveMode_1 register (PRT1DM1)
01C9: 70 EF    AND   F,0xEF             (0076) 	M8C_SetBank0
01CB: 62 07 EB MOV   REG[0x7],0xEB      (0077) 	mov	reg[07h], ebh		; Port_1_DriveMode_2 register (PRT1DM2)
01CE: 62 06 10 MOV   REG[0x6],0x10      (0078) 	mov	reg[06h], 10h		; Port_1_GlobalSelect register (PRT1GS)
01D1: 71 10    OR    F,0x10             (0079) 	M8C_SetBank1
01D3: 62 06 00 MOV   REG[0x6],0x0       (0080) 	mov	reg[06h], 00h		; Port_1_IntCtrl_0 register (PRT1IC0)
01D6: 62 07 00 MOV   REG[0x7],0x0       (0081) 	mov	reg[07h], 00h		; Port_1_IntCtrl_1 register (PRT1IC1)
01D9: 70 EF    AND   F,0xEF             (0082) 	M8C_SetBank0
01DB: 62 05 00 MOV   REG[0x5],0x0       (0083) 	mov	reg[05h], 00h		; Port_1_IntEn register (PRT1IE)
01DE: 71 10    OR    F,0x10             (0084) 	M8C_SetBank1
01E0: 62 08 00 MOV   REG[0x8],0x0       (0085) 	mov	reg[08h], 00h		; Port_2_DriveMode_0 register (PRT2DM0)
01E3: 62 09 FF MOV   REG[0x9],0xFF      (0086) 	mov	reg[09h], ffh		; Port_2_DriveMode_1 register (PRT2DM1)
01E6: 70 EF    AND   F,0xEF             (0087) 	M8C_SetBank0
01E8: 62 0B FF MOV   REG[0xB],0xFF      (0088) 	mov	reg[0bh], ffh		; Port_2_DriveMode_2 register (PRT2DM2)
01EB: 62 0A 00 MOV   REG[0xA],0x0       (0089) 	mov	reg[0ah], 00h		; Port_2_GlobalSelect register (PRT2GS)
01EE: 71 10    OR    F,0x10             (0090) 	M8C_SetBank1
01F0: 62 0A 00 MOV   REG[0xA],0x0       (0091) 	mov	reg[0ah], 00h		; Port_2_IntCtrl_0 register (PRT2IC0)
01F3: 62 0B 00 MOV   REG[0xB],0x0       (0092) 	mov	reg[0bh], 00h		; Port_2_IntCtrl_1 register (PRT2IC1)
01F6: 70 EF    AND   F,0xEF             (0093) 	M8C_SetBank0
01F8: 62 09 00 MOV   REG[0x9],0x0       (0094) 	mov	reg[09h], 00h		; Port_2_IntEn register (PRT2IE)
01FB: 71 10    OR    F,0x10             (0095) 	M8C_SetBank1
01FD: 62 0C 00 MOV   REG[0xC],0x0       (0096) 	mov	reg[0ch], 00h		; Port_3_DriveMode_0 register (PRT3DM0)
0200: 62 0D 0F MOV   REG[0xD],0xF       (0097) 	mov	reg[0dh], 0fh		; Port_3_DriveMode_1 register (PRT3DM1)
0203: 70 EF    AND   F,0xEF             (0098) 	M8C_SetBank0
0205: 62 0F 0F MOV   REG[0xF],0xF       (0099) 	mov	reg[0fh], 0fh		; Port_3_DriveMode_2 register (PRT3DM2)
0208: 62 0E 00 MOV   REG[0xE],0x0       (0100) 	mov	reg[0eh], 00h		; Port_3_GlobalSelect register (PRT3GS)
020B: 71 10    OR    F,0x10             (0101) 	M8C_SetBank1
020D: 62 0E 00 MOV   REG[0xE],0x0       (0102) 	mov	reg[0eh], 00h		; Port_3_IntCtrl_0 register (PRT3IC0)
0210: 62 0F 00 MOV   REG[0xF],0x0       (0103) 	mov	reg[0fh], 00h		; Port_3_IntCtrl_1 register (PRT3IC1)
0213: 70 EF    AND   F,0xEF             (0104) 	M8C_SetBank0
0215: 62 0D 00 MOV   REG[0xD],0x0       (0105) 	mov	reg[0dh], 00h		; Port_3_IntEn register (PRT3IE)
0218: 70 EF    AND   F,0xEF             (0106) 	M8C_SetBank0
021A: 7F       RET                      (0107) 	ret
(0108) 
(0109) 
(0110) ; PSoC Configuration file trailer PsocConfig.asm
FILE: lib\psocconfig.asm
                                        (0001) ; Generated by PSoC Designer 5.0.1127.0
                                        (0002) ;
                                        (0003) ;==========================================================================
                                        (0004) ;  PSoCConfig.asm
                                        (0005) ;  @PSOC_VERSION
                                        (0006) ;
                                        (0007) ;  Version: 0.85
                                        (0008) ;  Revised: June 22, 2004
                                        (0009) ;  Copyright (c) Cypress Semiconductor 2009. All Rights Reserved.
                                        (0010) ;
                                        (0011) ;  This file is generated by the Device Editor on Application Generation.
                                        (0012) ;  It contains code which loads the configuration data table generated in
                                        (0013) ;  the file PSoCConfigTBL.asm
                                        (0014) ;
                                        (0015) ;  DO NOT EDIT THIS FILE MANUALLY, AS IT IS OVERWRITTEN!!!
                                        (0016) ;  Edits to this file will not be preserved.
                                        (0017) ;==========================================================================
                                        (0018) ;
                                        (0019) include "m8c.inc"
                                        (0020) include "memory.inc"
                                        (0021) include "GlobalParams.inc"
                                        (0022) 
                                        (0023) export LoadConfigInit
                                        (0024) export _LoadConfigInit
                                        (0025) export LoadConfig_psoc_101_ledblinking
                                        (0026) export _LoadConfig_psoc_101_ledblinking
                                        (0027) 
                                        (0028) export NO_SHADOW
                                        (0029) export _NO_SHADOW
                                        (0030) 
                                        (0031) FLAG_CFG_MASK:      equ 10h         ;M8C flag register REG address bit mask
                                        (0032) END_CONFIG_TABLE:   equ ffh         ;end of config table indicator
                                        (0033) 
                                        (0034) AREA psoc_config(rom, rel)
                                        (0035) 
                                        (0036) ;---------------------------------------------------------------------------
                                        (0037) ; LoadConfigInit - Establish the start-up configuration (except for a few
                                        (0038) ;                  parameters handled by boot code, like CPU speed). This
                                        (0039) ;                  function can be called from user code, but typically it
                                        (0040) ;                  is only called from boot.
                                        (0041) ;
                                        (0042) ;       INPUTS: None.
                                        (0043) ;      RETURNS: Nothing.
                                        (0044) ; SIDE EFFECTS: Registers are volatile: the A and X registers can be modified!
                                        (0045) ;               In the large memory model currently only the page
                                        (0046) ;               pointer registers listed below are modified.  This does
                                        (0047) ;               not guarantee that in future implementations of this
                                        (0048) ;               function other page pointer registers will not be
                                        (0049) ;               modified.
                                        (0050) ;          
                                        (0051) ;               Page Pointer Registers Modified: 
                                        (0052) ;               CUR_PP
                                        (0053) ;
                                        (0054) _LoadConfigInit:
                                        (0055)  LoadConfigInit:
                                        (0056)     RAM_PROLOGUE RAM_USE_CLASS_4
                                        (0057)     

021D: 7C 02 24 LCALL 0x0224             (0058) 	lcall	LoadConfig_psoc_101_ledblinking
0220: 7C 01 A4 LCALL 0x01A4             (0059) 	lcall	LoadConfigTBL_psoc_101_ledblinking_Ordered
                                        (0060) 
                                        (0061) 
                                        (0062)     RAM_EPILOGUE RAM_USE_CLASS_4
0223: 7F       RET                      (0063)     ret
                                        (0064) 
                                        (0065) ;---------------------------------------------------------------------------
                                        (0066) ; Load Configuration psoc_101_ledblinking
                                        (0067) ;
                                        (0068) ;    Load configuration registers for psoc_101_ledblinking.
                                        (0069) ;    IO Bank 0 registers a loaded first,then those in IO Bank 1.
                                        (0070) ;
                                        (0071) ;       INPUTS: None.
                                        (0072) ;      RETURNS: Nothing.
                                        (0073) ; SIDE EFFECTS: Registers are volatile: the CPU A and X registers may be
                                        (0074) ;               modified as may the Page Pointer registers!
                                        (0075) ;               In the large memory model currently only the page
                                        (0076) ;               pointer registers listed below are modified.  This does
                                        (0077) ;               not guarantee that in future implementations of this
                                        (0078) ;               function other page pointer registers will not be
                                        (0079) ;               modified.
                                        (0080) ;          
                                        (0081) ;               Page Pointer Registers Modified: 
                                        (0082) ;               CUR_PP
                                        (0083) ;
                                        (0084) _LoadConfig_psoc_101_ledblinking:
                                        (0085)  LoadConfig_psoc_101_ledblinking:
                                        (0086)     RAM_PROLOGUE RAM_USE_CLASS_4
                                        (0087) 
0224: 10       PUSH  X                  (0088) 	push	x
0225: 70 EF    AND   F,0xEF             (0089)     M8C_SetBank0                    ; Force bank 0
0227: 50 00    MOV   A,0x0              (0090)     mov     a, 0                    ; Specify bank 0
0229: 67       ASR   A                  (0091)     asr     a                       ; Store in carry flag
                                        (0092)                                     ; Load bank 0 table:
022A: 50 01    MOV   A,0x1              (0093)     mov     A, >LoadConfigTBL_psoc_101_ledblinking_Bank0
022C: 57 50    MOV   X,0x50             (0094)     mov     X, <LoadConfigTBL_psoc_101_ledblinking_Bank0
022E: 7C 02 3F LCALL 0x023F             (0095)     lcall   LoadConfig              ; Load the bank 0 values
                                        (0096) 
0231: 50 01    MOV   A,0x1              (0097)     mov     a, 1                    ; Specify bank 1
0233: 67       ASR   A                  (0098)     asr     a                       ; Store in carry flag
                                        (0099)                                     ; Load bank 1 table:
0234: 50 01    MOV   A,0x1              (0100)     mov     A, >LoadConfigTBL_psoc_101_ledblinking_Bank1
0236: 57 75    MOV   X,0x75             (0101)     mov     X, <LoadConfigTBL_psoc_101_ledblinking_Bank1
0238: 7C 02 3F LCALL 0x023F             (0102)     lcall   LoadConfig              ; Load the bank 1 values
                                        (0103) 
023B: 70 EF    AND   F,0xEF             (0104)     M8C_SetBank0                    ; Force return to bank 0
023D: 20       POP   X                  (0105) 	pop		x
                                        (0106) 
                                        (0107)     RAM_EPILOGUE RAM_USE_CLASS_4
023E: 7F       RET                      (0108)     ret
                                        (0109) 
                                        (0110) 
                                        (0111) 
                                        (0112) 
                                        (0113) ;---------------------------------------------------------------------------
                                        (0114) ; LoadConfig - Set IO registers as specified in ROM table of (address,value)
                                        (0115) ;              pairs. Terminate on address=0xFF.
                                        (0116) ;
                                        (0117) ;  INPUTS:  [A,X] points to the table to be loaded
                                        (0118) ;           Flag Register Carry bit encodes the Register Bank
                                        (0119) ;           (Carry=0 => Bank 0; Carry=1 => Bank 1)
                                        (0120) ;
                                        (0121) ;  RETURNS: nothing.
                                        (0122) ;
                                        (0123) ;  STACK FRAME:  X-4 I/O Bank 0/1 indicator
                                        (0124) ;                X-3 Temporary store for register address
                                        (0125) ;                X-2 LSB of config table address
                                        (0126) ;                X-1 MSB of config table address
                                        (0127) ;
                                        (0128) LoadConfig:
                                        (0129)     RAM_PROLOGUE RAM_USE_CLASS_2
023F: 38 02    ADD   SP,0x2             (0130)     add     SP, 2                   ; Set up local vars
0241: 10       PUSH  X                  (0131)     push    X                       ; Save config table address on stack
0242: 08       PUSH  A                  (0132)     push    A
0243: 4F       MOV   X,SP               (0133)     mov     X, SP
0244: 56 FC 00 MOV   [X-4],0x0          (0134)     mov     [X-4], 0                ; Set default Destination to Bank 0
0247: D0 04    JNC   0x024C             (0135)     jnc     .BankSelectSaved        ; Carry says Bank 0 is OK
0249: 56 FC 01 MOV   [X-4],0x1          (0136)     mov     [X-4], 1                ; No Carry: default to Bank 1
                                        (0137) .BankSelectSaved:
024C: 18       POP   A                  (0138)     pop     A
024D: 20       POP   X                  (0139)     pop     X
                                        (0140) 
                                        (0141) LoadConfigLp:
024E: 70 EF    AND   F,0xEF             (0142)     M8C_SetBank0                    ; Switch to bank 0
0250: 62 E3 00 MOV   REG[0xE3],0x0      (0143)     M8C_ClearWDT                    ; Clear the watchdog for long inits
0253: 10       PUSH  X                  (0144)     push    X                       ; Preserve the config table address
0254: 08       PUSH  A                  (0145)     push    A
0255: 28       ROMX                     (0146)     romx                            ; Load register address from table
0256: 39 FF    CMP   A,0xFF             (0147)     cmp     A, END_CONFIG_TABLE     ; End of table?
0258: A0 1F    JZ    0x0278             (0148)     jz      EndLoadConfig           ;   Yes, go wrap it up
025A: 4F       MOV   X,SP               (0149)     mov     X, SP                   ;
025B: 48 FC 01 TST   [X-4],0x1          (0150)     tst     [X-4], 1                ; Loading IO Bank 1?
025E: A0 03    JZ    0x0262             (0151)     jz      .IOBankNowSet           ;    No, Bank 0 is fine
0260: 71 10    OR    F,0x10             (0152)     M8C_SetBank1                    ;   Yes, switch to Bank 1
                                        (0153) .IOBankNowSet:
0262: 54 FD    MOV   [X-3],A            (0154)     mov     [X-3], A                ; Stash the register address
0264: 18       POP   A                  (0155)     pop     A                       ; Retrieve the table address
0265: 20       POP   X                  (0156)     pop     X
0266: 75       INC   X                  (0157)     inc     X                       ; Advance to the data byte
0267: 09 00    ADC   A,0x0              (0158)     adc     A, 0
0269: 10       PUSH  X                  (0159)     push    X                       ; Save the config table address again
026A: 08       PUSH  A                  (0160)     push    A
026B: 28       ROMX                     (0161)     romx                            ; load config data from the table
026C: 4F       MOV   X,SP               (0162)     mov     X, SP                   ; retrieve the register address
026D: 59 FD    MOV   X,[X-3]            (0163)     mov     X, [X-3]
026F: 61 00    MOV   REG[X+0x0],A       (0164)     mov     reg[X], A               ; Configure the register
0271: 18       POP   A                  (0165)     pop     A                       ; retrieve the table address
0272: 20       POP   X                  (0166)     pop     X
0273: 75       INC   X                  (0167)     inc     X                       ; advance to next table entry
0274: 09 00    ADC   A,0x0              (0168)     adc     A, 0
0276: 8F D7    JMP   0x024E             (0169)     jmp     LoadConfigLp            ; loop to configure another register
                                        (0170) EndLoadConfig:
0278: 38 FC    ADD   SP,0xFC            (0171)     add     SP, -4
027A: 70 3F    AND   F,0x3F             
027C: 71 C0    OR    F,0xC0             (0172)     RAM_EPILOGUE RAM_USE_CLASS_2
027E: 7F       RET                      (0173)     ret
(0174) 
(0175) AREA InterruptRAM(ram, rel)
(0176) 
(0177) NO_SHADOW:
(0178) _NO_SHADOW:
FILE: lib\led_pwmint.asm
                                        (0001) ;;*****************************************************************************
                                        (0002) ;;*****************************************************************************
                                        (0003) ;;  FILENAME: LED_PWMINT.asm
                                        (0004) ;;   Version: 2.5, Updated on 2009/10/15 at 17:11:37
                                        (0005) ;;  Generated by PSoC Designer 5.0.1127.0
                                        (0006) ;;
                                        (0007) ;;  DESCRIPTION: PWM8 Interrupt Service Routine
                                        (0008) ;;-----------------------------------------------------------------------------
                                        (0009) ;;  Copyright (c) Cypress Semiconductor 2009. All Rights Reserved.
                                        (0010) ;;*****************************************************************************
                                        (0011) ;;*****************************************************************************
                                        (0012) 
                                        (0013) include "m8c.inc"
                                        (0014) include "LED_PWM.inc"
                                        (0015) include "memory.inc"
                                        (0016) 
                                        (0017) 
                                        (0018) ;-----------------------------------------------
                                        (0019) ;  Global Symbols
                                        (0020) ;-----------------------------------------------
                                        (0021) export  _LED_PWM_ISR
                                        (0022) 
                                        (0023) 
                                        (0024) AREA InterruptRAM (RAM,REL,CON)
                                        (0025) 
                                        (0026) ;@PSoC_UserCode_INIT@ (Do not change this line.)
                                        (0027) ;---------------------------------------------------
                                        (0028) ; Insert your custom declarations below this banner
                                        (0029) ;---------------------------------------------------
                                        (0030) 
                                        (0031) ;------------------------
                                        (0032) ; Includes
                                        (0033) ;------------------------
                                        (0034) 
                                        (0035) 	
                                        (0036) ;------------------------
                                        (0037) ;  Constant Definitions
                                        (0038) ;------------------------
                                        (0039) 
                                        (0040) 
                                        (0041) ;------------------------
                                        (0042) ; Variable Allocation
                                        (0043) ;------------------------
                                        (0044) 
                                        (0045) 
                                        (0046) ;---------------------------------------------------
                                        (0047) ; Insert your custom declarations above this banner
                                        (0048) ;---------------------------------------------------
                                        (0049) ;@PSoC_UserCode_END@ (Do not change this line.)
                                        (0050) 
                                        (0051) 
                                        (0052) AREA UserModules (ROM, REL)
                                        (0053) 
                                        (0054) ;-----------------------------------------------------------------------------
                                        (0055) ;  FUNCTION NAME: _LED_PWM_ISR
                                        (0056) ;
                                        (0057) ;  DESCRIPTION: Unless modified, this implements only a null handler stub.
                                        (0058) ;
                                        (0059) ;-----------------------------------------------------------------------------
                                        (0060) ;
                                        (0061) 
                                        (0062) _LED_PWM_ISR:
                                        (0063) 
                                        (0064)    ;@PSoC_UserCode_BODY@ (Do not change this line.)
                                        (0065)    ;---------------------------------------------------
                                        (0066)    ; Insert your custom code below this banner
                                        (0067)    ;---------------------------------------------------
                                        (0068)    ;   NOTE: interrupt service routines must preserve
                                        (0069)    ;   the values of the A and X CPU registers.
                                        (0070) 
                                        (0071)    ;---------------------------------------------------
                                        (0072)    ; Insert your custom code above this banner
                                        (0073)    ;---------------------------------------------------
                                        (0074)    ;@PSoC_UserCode_END@ (Do not change this line.)
                                        (0075) 
027F: 7E       RETI                     (0076)    reti
(0077) 
(0078) 
(0079) ; end of file LED_PWMINT.asm
FILE: lib\led_pwm.asm
                                        (0001) ;;*****************************************************************************
                                        (0002) ;;*****************************************************************************
                                        (0003) ;;  FILENAME: LED_PWM.asm
                                        (0004) ;;   Version: 2.5, Updated on 2009/10/15 at 17:11:37
                                        (0005) ;;  Generated by PSoC Designer 5.0.1127.0
                                        (0006) ;;
                                        (0007) ;;  DESCRIPTION: PWM8 User Module software implementation file
                                        (0008) ;;
                                        (0009) ;;  NOTE: User Module APIs conform to the fastcall16 convention for marshalling
                                        (0010) ;;        arguments and observe the associated "Registers are volatile" policy.
                                        (0011) ;;        This means it is the caller's responsibility to preserve any values
                                        (0012) ;;        in the X and A registers that are still needed after the API functions
                                        (0013) ;;        returns. For Large Memory Model devices it is also the caller's 
                                        (0014) ;;        responsibility to perserve any value in the CUR_PP, IDX_PP, MVR_PP and 
                                        (0015) ;;        MVW_PP registers. Even though some of these registers may not be modified
                                        (0016) ;;        now, there is no guarantee that will remain the case in future releases.
                                        (0017) ;;-----------------------------------------------------------------------------
                                        (0018) ;;  Copyright (c) Cypress Semiconductor 2009. All Rights Reserved.
                                        (0019) ;;*****************************************************************************
                                        (0020) ;;*****************************************************************************
                                        (0021) 
                                        (0022) include "m8c.inc"
                                        (0023) include "LED_PWM.inc"
                                        (0024) include "memory.inc"
                                        (0025) 
                                        (0026) ;-----------------------------------------------
                                        (0027) ;  Global Symbols
                                        (0028) ;-----------------------------------------------
                                        (0029) export  LED_PWM_EnableInt
                                        (0030) export _LED_PWM_EnableInt
                                        (0031) export  LED_PWM_DisableInt
                                        (0032) export _LED_PWM_DisableInt
                                        (0033) export  LED_PWM_Start
                                        (0034) export _LED_PWM_Start
                                        (0035) export  LED_PWM_Stop
                                        (0036) export _LED_PWM_Stop
                                        (0037) export  LED_PWM_WritePeriod
                                        (0038) export _LED_PWM_WritePeriod
                                        (0039) export  LED_PWM_WritePulseWidth
                                        (0040) export _LED_PWM_WritePulseWidth
                                        (0041) export  LED_PWM_bReadPulseWidth
                                        (0042) export _LED_PWM_bReadPulseWidth
                                        (0043) export  LED_PWM_bReadCounter
                                        (0044) export _LED_PWM_bReadCounter
                                        (0045) 
                                        (0046) ; The following functions are deprecated and subject to omission in future releases
                                        (0047) ;
                                        (0048) export  bLED_PWM_ReadPulseWidth    ; deprecated
                                        (0049) export _bLED_PWM_ReadPulseWidth    ; deprecated
                                        (0050) export  bLED_PWM_ReadCounter       ; deprecated
                                        (0051) export _bLED_PWM_ReadCounter       ; deprecated
                                        (0052) 
                                        (0053) 
                                        (0054) AREA psoc_101_ledblinking_RAM (RAM,REL)
                                        (0055) 
                                        (0056) ;-----------------------------------------------
                                        (0057) ;  Constant Definitions
                                        (0058) ;-----------------------------------------------
                                        (0059) 
                                        (0060) INPUT_REG_NULL:                equ 0x00    ; Clear the input register
                                        (0061) 
                                        (0062) 
                                        (0063) ;-----------------------------------------------
                                        (0064) ; Variable Allocation
                                        (0065) ;-----------------------------------------------
                                        (0066) 
                                        (0067) 
                                        (0068) AREA UserModules (ROM, REL)
                                        (0069) 
                                        (0070) .SECTION
                                        (0071) ;-----------------------------------------------------------------------------
                                        (0072) ;  FUNCTION NAME: LED_PWM_EnableInt
                                        (0073) ;
                                        (0074) ;  DESCRIPTION:
                                        (0075) ;     Enables this PWM's interrupt by setting the interrupt enable mask bit
                                        (0076) ;     associated with this User Module. This function has no effect until and
                                        (0077) ;     unless the global interrupts are enabled (for example by using the
                                        (0078) ;     macro M8C_EnableGInt).
                                        (0079) ;-----------------------------------------------------------------------------
                                        (0080) ;
                                        (0081) ;  ARGUMENTS:    None.
                                        (0082) ;  RETURNS:      Nothing.
                                        (0083) ;  SIDE EFFECTS:
                                        (0084) ;    The A and X registers may be modified by this or future implementations
                                        (0085) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0086) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0087) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0088) ;    functions.
                                        (0089) ;
                                        (0090)  LED_PWM_EnableInt:
                                        (0091) _LED_PWM_EnableInt:
                                        (0092)    RAM_PROLOGUE RAM_USE_CLASS_1
0280: 43 E1 01 OR    REG[0xE1],0x1      (0093)    LED_PWM_EnableInt_M
                                        (0094)    RAM_EPILOGUE RAM_USE_CLASS_1
0283: 7F       RET                      (0095)    ret
                                        (0096) 
                                        (0097) 
                                        (0098) .ENDSECTION
                                        (0099) 
                                        (0100) .SECTION
                                        (0101) ;-----------------------------------------------------------------------------
                                        (0102) ;  FUNCTION NAME: LED_PWM_DisableInt
                                        (0103) ;
                                        (0104) ;  DESCRIPTION:
                                        (0105) ;     Disables this PWM's interrupt by clearing the interrupt enable
                                        (0106) ;     mask bit associated with this User Module.
                                        (0107) ;-----------------------------------------------------------------------------
                                        (0108) ;
                                        (0109) ;  ARGUMENTS:    None
                                        (0110) ;  RETURNS:      Nothing
                                        (0111) ;  SIDE EFFECTS:
                                        (0112) ;    The A and X registers may be modified by this or future implementations
                                        (0113) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0114) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0115) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0116) ;    functions.
                                        (0117) ;
                                        (0118)  LED_PWM_DisableInt:
                                        (0119) _LED_PWM_DisableInt:
                                        (0120)    RAM_PROLOGUE RAM_USE_CLASS_1
0284: 41 E1 FE AND   REG[0xE1],0xFE     (0121)    LED_PWM_DisableInt_M
                                        (0122)    RAM_EPILOGUE RAM_USE_CLASS_1
0287: 7F       RET                      (0123)    ret
                                        (0124) 
                                        (0125) 
                                        (0126) .ENDSECTION
                                        (0127) 
                                        (0128) .SECTION
                                        (0129) ;-----------------------------------------------------------------------------
                                        (0130) ;  FUNCTION NAME: LED_PWM_Start
                                        (0131) ;
                                        (0132) ;  DESCRIPTION:
                                        (0133) ;     Sets the start bit in the Control register of this user module.  The
                                        (0134) ;     PWM will begin counting on the next input clock as soon as the
                                        (0135) ;     enable input is asserted high.
                                        (0136) ;-----------------------------------------------------------------------------
                                        (0137) ;
                                        (0138) ;  ARGUMENTS:    None
                                        (0139) ;  RETURNS:      Nothing
                                        (0140) ;  SIDE EFFECTS:
                                        (0141) ;    The A and X registers may be modified by this or future implementations
                                        (0142) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0143) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0144) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0145) ;    functions.
                                        (0146) ;
                                        (0147)  LED_PWM_Start:
                                        (0148) _LED_PWM_Start:
                                        (0149)    RAM_PROLOGUE RAM_USE_CLASS_1
0288: 43 23 01 OR    REG[0x23],0x1      (0150)    LED_PWM_Start_M
                                        (0151)    RAM_EPILOGUE RAM_USE_CLASS_1
028B: 7F       RET                      (0152)    ret
                                        (0153) 
                                        (0154) 
                                        (0155) .ENDSECTION
                                        (0156) 
                                        (0157) .SECTION
                                        (0158) ;-----------------------------------------------------------------------------
                                        (0159) ;  FUNCTION NAME: LED_PWM_Stop
                                        (0160) ;
                                        (0161) ;  DESCRIPTION:
                                        (0162) ;     Disables PWM operation by clearing the start bit in the Control
                                        (0163) ;     register.
                                        (0164) ;-----------------------------------------------------------------------------
                                        (0165) ;
                                        (0166) ;  ARGUMENTS:    None
                                        (0167) ;  RETURNS:      Nothing
                                        (0168) ;  SIDE EFFECTS:
                                        (0169) ;    The A and X registers may be modified by this or future implementations
                                        (0170) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0171) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0172) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0173) ;    functions.
                                        (0174) ;
                                        (0175)  LED_PWM_Stop:
                                        (0176) _LED_PWM_Stop:
                                        (0177)    RAM_PROLOGUE RAM_USE_CLASS_1
028C: 41 23 FE AND   REG[0x23],0xFE     (0178)    LED_PWM_Stop_M
                                        (0179)    RAM_EPILOGUE RAM_USE_CLASS_1
028F: 7F       RET                      (0180)    ret
                                        (0181) 
                                        (0182) 
                                        (0183) .ENDSECTION
                                        (0184) 
                                        (0185) .SECTION
                                        (0186) ;-----------------------------------------------------------------------------
                                        (0187) ;  FUNCTION NAME: LED_PWM_WritePeriod
                                        (0188) ;
                                        (0189) ;  DESCRIPTION:
                                        (0190) ;     Write the 8-bit period value into the Period register (DR1).
                                        (0191) ;-----------------------------------------------------------------------------
                                        (0192) ;
                                        (0193) ;  ARGUMENTS: fastcall16 BYTE bPeriodValue (passed in A)
                                        (0194) ;  RETURNS:   Nothing
                                        (0195) ;  SIDE EFFECTS:
                                        (0196) ;    If the PWM user module is stopped, then this value will also be
                                        (0197) ;    latched into the Count register (DR0).
                                        (0198) ;    
                                        (0199) ;    The A and X registers may be modified by this or future implementations
                                        (0200) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0201) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0202) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0203) ;    functions.
                                        (0204) ;
                                        (0205)  LED_PWM_WritePeriod:
                                        (0206) _LED_PWM_WritePeriod:
                                        (0207)    RAM_PROLOGUE RAM_USE_CLASS_1
0290: 60 21    MOV   REG[0x21],A        (0208)    mov   reg[LED_PWM_PERIOD_REG], A
                                        (0209)    RAM_EPILOGUE RAM_USE_CLASS_1
0292: 7F       RET                      (0210)    ret
                                        (0211) 
                                        (0212) 
                                        (0213) .ENDSECTION
                                        (0214) 
                                        (0215) .SECTION
                                        (0216) ;-----------------------------------------------------------------------------
                                        (0217) ;  FUNCTION NAME: LED_PWM_WritePulseWidth
                                        (0218) ;
                                        (0219) ;  DESCRIPTION:
                                        (0220) ;     Writes compare value into the Compare register (DR2).
                                        (0221) ;-----------------------------------------------------------------------------
                                        (0222) ;
                                        (0223) ;  ARGUMENTS:    fastcall16 BYTE bCompareValue (passed in A)
                                        (0224) ;  RETURNS:      Nothing
                                        (0225) ;  SIDE EFFECTS:
                                        (0226) ;    The A and X registers may be modified by this or future implementations
                                        (0227) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0228) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0229) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0230) ;    functions.
                                        (0231) ;
                                        (0232)  LED_PWM_WritePulseWidth:
                                        (0233) _LED_PWM_WritePulseWidth:
                                        (0234)    RAM_PROLOGUE RAM_USE_CLASS_1
0293: 60 22    MOV   REG[0x22],A        (0235)    mov   reg[LED_PWM_COMPARE_REG], A
                                        (0236)    RAM_EPILOGUE RAM_USE_CLASS_1
0295: 7F       RET                      (0237)    ret
                                        (0238) 
                                        (0239) 
                                        (0240) .ENDSECTION
                                        (0241) 
                                        (0242) .SECTION
                                        (0243) ;-----------------------------------------------------------------------------
                                        (0244) ;  FUNCTION NAME: LED_PWM_bReadPulseWidth
                                        (0245) ;
                                        (0246) ;  DESCRIPTION:
                                        (0247) ;     Reads the Compare register.
                                        (0248) ;-----------------------------------------------------------------------------
                                        (0249) ;
                                        (0250) ;  ARGUMENTS:    None
                                        (0251) ;  RETURNS:      fastcall16 BYTE bCompareValue (value of DR2 in the A register)
                                        (0252) ;  SIDE EFFECTS:
                                        (0253) ;    The A and X registers may be modified by this or future implementations
                                        (0254) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0255) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0256) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0257) ;    functions.
                                        (0258) ;
                                        (0259)  LED_PWM_bReadPulseWidth:
                                        (0260) _LED_PWM_bReadPulseWidth:
                                        (0261)  bLED_PWM_ReadPulseWidth:                        ; this name deprecated
                                        (0262) _bLED_PWM_ReadPulseWidth:                        ; this name deprecated
                                        (0263)    RAM_PROLOGUE RAM_USE_CLASS_1
0296: 5D 22    MOV   A,REG[0x22]        (0264)    mov   A, reg[LED_PWM_COMPARE_REG]
                                        (0265)    RAM_EPILOGUE RAM_USE_CLASS_1
0298: 7F       RET                      (0266)    ret
                                        (0267) 
                                        (0268) 
                                        (0269) .ENDSECTION
                                        (0270) 
                                        (0271) .SECTION
                                        (0272) ;-----------------------------------------------------------------------------
                                        (0273) ;  FUNCTION NAME: LED_PWM_bReadCounter
                                        (0274) ;
                                        (0275) ;  DESCRIPTION:
                                        (0276) ;     Returns the value in the Count register (DR0), preserving the value in
                                        (0277) ;     the compare register (DR2). Interrupts are prevented during the transfer
                                        (0278) ;     from the Count to the Compare registers by holding the clock low in
                                        (0279) ;     the PSoC block.
                                        (0280) ;-----------------------------------------------------------------------------
                                        (0281) ;
                                        (0282) ;  ARGUMENTS: None
                                        (0283) ;  RETURNS:   fastcall16 BYTE bCount (value of DR0 in the A register)
                                        (0284) ;  SIDE EFFECTS:
                                        (0285) ;     1) The user module is stopped momentarily and one or more counts may be missed.
                                        (0286) ;     2) The A and X registers may be modified by this or future implementations
                                        (0287) ;        of this function.  The same is true for all RAM page pointer registers in
                                        (0288) ;        the Large Memory Model.  When necessary, it is the calling function's
                                        (0289) ;        responsibility to perserve their values across calls to fastcall16 
                                        (0290) ;        functions.
                                        (0291) ;
                                        (0292)  LED_PWM_bReadCounter:
                                        (0293) _LED_PWM_bReadCounter:
                                        (0294)  bLED_PWM_ReadCounter:                           ; this name deprecated
                                        (0295) _bLED_PWM_ReadCounter:                           ; this name deprecated
                                        (0296) 
                                        (0297)    bOrigCompareValue:      EQU   0               ; Frame offset to temp Compare store
                                        (0298)    bOrigClockSetting:      EQU   1               ; Frame offset to temp Input   store
                                        (0299)    wCounter:               EQU   2               ; Frame offset to temp Count   store
                                        (0300)    STACK_FRAME_SIZE:       EQU   3               ; max stack frame size is 3 bytes
                                        (0301) 
                                        (0302)    RAM_PROLOGUE RAM_USE_CLASS_2
0299: 4F       MOV   X,SP               (0303)    mov   X, SP                                   ; X <- stack frame pointer
029A: 5D 22    MOV   A,REG[0x22]        (0304)    mov   A, reg[LED_PWM_COMPARE_REG]             ; Save the Compare register on the stack
029C: 08       PUSH  A                  (0305)    push  A                                       ;
029D: 41 23 FE AND   REG[0x23],0xFE     (0306)    LED_PWM_Stop_M                                ; Disable (stop) the PWM
02A0: 71 10    OR    F,0x10             (0307)    M8C_SetBank1                                  ;
02A2: 5D 21    MOV   A,REG[0x21]        (0308)    mov   A, reg[LED_PWM_INPUT_REG]               ; save the clock input setting
02A4: 08       PUSH  A                  (0309)    push  A                                       ;   on the stack (now 2 bytes) and ...
                                        (0310)                                                  ;   hold the clock low:
02A5: 62 21 00 MOV   REG[0x21],0x0      (0311)    mov   reg[LED_PWM_INPUT_REG], INPUT_REG_NULL
02A8: 70 EF    AND   F,0xEF             (0312)    M8C_SetBank0
                                        (0313)                                                  ; Extract the Count via DR2 register
02AA: 5D 20    MOV   A,REG[0x20]        (0314)    mov   A, reg[LED_PWM_COUNTER_REG]             ; DR2 <- DR0
02AC: 5D 22    MOV   A,REG[0x22]        (0315)    mov   A, reg[LED_PWM_COMPARE_REG]             ; Stash the Count on the stack
02AE: 08       PUSH  A                  (0316)    push  A                                       ;  -stack frame is now 3 bytes
02AF: 52 00    MOV   A,[X+0]            (0317)    mov   A, [X+bOrigCompareValue]                ; Restore the Compare register
02B1: 60 22    MOV   REG[0x22],A        (0318)    mov   reg[LED_PWM_COMPARE_REG], A
02B3: 71 10    OR    F,0x10             (0319)    M8C_SetBank1                                  ; Restore the PWM operation:
02B5: 52 01    MOV   A,[X+1]            (0320)    mov   A, [X+bOrigClockSetting]                ;   First, the clock setting...
02B7: 60 21    MOV   REG[0x21],A        (0321)    mov   reg[LED_PWM_INPUT_REG], A               ;
02B9: 70 EF    AND   F,0xEF             (0322)    M8C_SetBank0                                  ;
02BB: 43 23 01 OR    REG[0x23],0x1      (0323)    LED_PWM_Start_M                               ;   then re-enable the PWM.
02BE: 18       POP   A                  (0324)    pop   A                                       ; Setup the return value
02BF: 38 FE    ADD   SP,0xFE            (0325)    ADD   SP, -(STACK_FRAME_SIZE-1)               ; Zap remainder of stack frame
02C1: 70 3F    AND   F,0x3F             
02C3: 71 C0    OR    F,0xC0             (0326)    RAM_EPILOGUE RAM_USE_CLASS_2
02C5: 7F       RET                      (0327)    ret
(0328) 
(0329) .ENDSECTION
(0330) 
(0331) ; End of File LED_PWM.asm
FILE: C:\Users\hariu\DOCUME~1\PSOCDE~1.0PR\PSOC_1~1\PSOC_1~1\main.c
(0001) //----------------------------------------------------------------------------
(0002) // C main line
(0003) //----------------------------------------------------------------------------
(0004) 
(0005) #include <m8c.h>        // part specific constants and macros
(0006) #include "PSoCAPI.h"    // PSoC API definitions for all User Modules
(0007) 
(0008) static int i;
(0009) 
(0010) void main(void)
_main|__text_start|_main:
    02C6: 10       PUSH  X
    02C7: 7C 02 88 LCALL 0x0288
    02CA: 20       POP   X
    02CB: 80 21    JMP   0x02ED
(0011) {
(0012)     // Insert your main routine code here.
(0013) 	LED_PWM_Start();
(0014) 	while(1)
(0015) 	{
(0016) 		PRT1DR ^= 0x04;  //Port_1_2
    02CD: 45 04 04 XOR   REG[0x4],0x4
(0017) 		for(i=0; i < 22000; i++);
    02D0: 62 D0 00 MOV   REG[0xD0],0x0
    02D3: 55 03 00 MOV   [main.c:i+1],0x0
    02D6: 55 02 00 MOV   [main.c:i],0x0
    02D9: 62 D0 00 MOV   REG[0xD0],0x0
    02DC: 76 03    INC   [main.c:i+1]
    02DE: 0E 02 00 ADC   [main.c:i],0x0
    02E1: 51 03    MOV   A,[main.c:i+1]
    02E3: 11 F0    SUB   A,0xF0
    02E5: 51 02    MOV   A,[main.c:i]
    02E7: 31 80    XOR   A,0x80
    02E9: 19 D5    SBB   A,0xD5
    02EB: CF ED    JC    0x02D9
(0018) 	}
    02ED: 8F DF    JMP   0x02CD
(0019) }
FILE: <library>
--------------------------------------------------------------------------------


PSoC Designer Version: 5.0.1127.0

Copyright (C) 1994 - 2009 ImageCraft Creations Inc.
ImageCraft, 706 Colorado Ave., Suite 10-88, Palo Alto, CA 94303
info@imagecraft.com, phone (650) 493-9326 FAX (650) 493-9329
http://www.imagecraft.com
lcc source code (C) 1995, by David R. Hanson and AT&T. Reproduced by permission.
Release version 7.02.004
